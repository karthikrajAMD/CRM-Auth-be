#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("new-demo:server");
var http = require("http");
const socketio = require("socket.io");
const {
  addUser,
  removeUser,
  getUser,
  getRoomUsers,
} = require("../routes/entity");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8100");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketio(server, { cors: { origin: "*" } });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server Started at the port ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

io.on("connect", (socket) => {
  socket.on("join", ({ user, room }, callback) => {
    console.log(user, room);
    const { response, error } = addUser({
      id: socket.id,
      user: user,
      room: room,
    });

    console.log(response);

    if (error) {
      callback(error);
      return;
    }
    socket.join(response.room);
    socket.emit("message", {
      user: "@CRM Admin",
      text: `Welcome ${response.user} `,
    });
    socket.broadcast.to(response.room).emit("message", {
      user: "@CRM Admin",
      text: `${response.user} has joined`,
    });

    io.to(response.room).emit("roomMembers", getRoomUsers(response.room));
  });

  socket.on("sendMessage", (message, callback) => {
    const user = getUser(socket.id);

    io.to(user.room).emit("message", { user: user.user, text: message });

    callback();
  });

  socket.on("disconnect", () => {
    console.log("User disconnected");
    const user = removeUser(socket.id);

    if (user) {
      io.to(user.room).emit("message", {
        user: "@CRM Admin",
        text: `${user.user} has left`,
      });
    }
  });
});
